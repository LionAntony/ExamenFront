{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.getSlotMetrics = getSlotMetrics;\n\nvar _dates = require('./dates');\n\nvar _dates2 = _interopRequireDefault(_dates);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar getDstOffset = function getDstOffset(start, end) {\n  return Math.abs(start.getTimezoneOffset() - end.getTimezoneOffset());\n};\n\nvar getKey = function getKey(min, max, step, slots) {\n  return '' + +_dates2.default.startOf(min, 'minutes') + ('' + +_dates2.default.startOf(max, 'minutes')) + (step + '-' + slots);\n};\n\nfunction getSlotMetrics(_ref) {\n  var start = _ref.min,\n      end = _ref.max,\n      step = _ref.step,\n      timeslots = _ref.timeslots;\n  var key = getKey(start, end, step, timeslots);\n  var totalMin = _dates2.default.diff(start, end, 'minutes') + getDstOffset(start, end);\n\n  var minutesFromMidnight = _dates2.default.diff(_dates2.default.startOf(start, 'day'), start, 'minutes');\n\n  var numGroups = Math.ceil(totalMin / (step * timeslots));\n  var numSlots = numGroups * timeslots;\n  var groups = new Array(numGroups);\n  var slots = new Array(numSlots); // Each slot date is created from \"zero\", instead of adding `step` to\n  // the previous one, in order to avoid DST oddities\n\n  for (var grp = 0; grp < numGroups; grp++) {\n    groups[grp] = new Array(timeslots);\n\n    for (var slot = 0; slot < timeslots; slot++) {\n      var slotIdx = grp * timeslots + slot;\n      var minFromStart = slotIdx * step; // A date with total minutes calculated from the start of the day\n\n      slots[slotIdx] = groups[grp][slot] = new Date(start.getFullYear(), start.getMonth(), start.getDate(), 0, minutesFromMidnight + minFromStart, 0, 0);\n    }\n  } // Necessary to be able to select up until the last timeslot in a day\n\n\n  var lastSlotMinFromStart = slots.length * step;\n  slots.push(new Date(start.getFullYear(), start.getMonth(), start.getDate(), 0, minutesFromMidnight + lastSlotMinFromStart, 0, 0));\n\n  function positionFromDate(date) {\n    var diff = _dates2.default.diff(start, date, 'minutes') + getDstOffset(start, date);\n    return Math.min(diff, totalMin);\n  }\n\n  return {\n    groups: groups,\n    update: function update(args) {\n      if (getKey(args) !== key) return getSlotMetrics(args);\n      return this;\n    },\n    dateIsInGroup: function dateIsInGroup(date, groupIndex) {\n      var nextGroup = groups[groupIndex + 1];\n      return _dates2.default.inRange(date, groups[groupIndex][0], nextGroup ? nextGroup[0] : end, 'minutes');\n    },\n    nextSlot: function nextSlot(slot) {\n      var next = slots[Math.min(slots.indexOf(slot) + 1, slots.length - 1)]; // in the case of the last slot we won't a long enough range so manually get it\n\n      if (next === slot) next = _dates2.default.add(slot, step, 'minutes');\n      return next;\n    },\n    closestSlotToPosition: function closestSlotToPosition(percent) {\n      var slot = Math.min(slots.length - 1, Math.max(0, Math.floor(percent * numSlots)));\n      return slots[slot];\n    },\n    startsBefore: function startsBefore(date) {\n      return _dates2.default.lt(_dates2.default.merge(start, date), start, 'minutes');\n    },\n    startsAfter: function startsAfter(date) {\n      return _dates2.default.gt(_dates2.default.merge(end, date), end, 'minutes');\n    },\n    getRange: function getRange(rangeStart, rangeEnd) {\n      rangeStart = _dates2.default.min(end, _dates2.default.max(start, rangeStart));\n      rangeEnd = _dates2.default.min(end, _dates2.default.max(start, rangeEnd));\n      var rangeStartMin = positionFromDate(rangeStart);\n      var rangeEndMin = positionFromDate(rangeEnd);\n      var top = rangeStartMin / totalMin * 100;\n      return {\n        top: top,\n        height: rangeEndMin / totalMin * 100 - top,\n        start: positionFromDate(rangeStart),\n        startDate: rangeStart,\n        end: positionFromDate(rangeEnd),\n        endDate: rangeEnd\n      };\n    }\n  };\n}","map":{"version":3,"sources":["/Users/leonardogutierrezjuarez/Documents/examenFront/node_modules/react-big-calendar/lib/utils/TimeSlots.js"],"names":["exports","__esModule","getSlotMetrics","_dates","require","_dates2","_interopRequireDefault","obj","default","getDstOffset","start","end","Math","abs","getTimezoneOffset","getKey","min","max","step","slots","startOf","_ref","timeslots","key","totalMin","diff","minutesFromMidnight","numGroups","ceil","numSlots","groups","Array","grp","slot","slotIdx","minFromStart","Date","getFullYear","getMonth","getDate","lastSlotMinFromStart","length","push","positionFromDate","date","update","args","dateIsInGroup","groupIndex","nextGroup","inRange","nextSlot","next","indexOf","add","closestSlotToPosition","percent","floor","startsBefore","lt","merge","startsAfter","gt","getRange","rangeStart","rangeEnd","rangeStartMin","rangeEndMin","top","height","startDate","endDate"],"mappings":"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","sourcesContent":["'use strict';\n\nexports.__esModule = true;\nexports.getSlotMetrics = getSlotMetrics;\n\nvar _dates = require('./dates');\n\nvar _dates2 = _interopRequireDefault(_dates);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar getDstOffset = function getDstOffset(start, end) {\n  return Math.abs(start.getTimezoneOffset() - end.getTimezoneOffset());\n};\n\nvar getKey = function getKey(min, max, step, slots) {\n  return '' + +_dates2.default.startOf(min, 'minutes') + ('' + +_dates2.default.startOf(max, 'minutes')) + (step + '-' + slots);\n};\n\nfunction getSlotMetrics(_ref) {\n  var start = _ref.min,\n      end = _ref.max,\n      step = _ref.step,\n      timeslots = _ref.timeslots;\n\n  var key = getKey(start, end, step, timeslots);\n\n  var totalMin = _dates2.default.diff(start, end, 'minutes') + getDstOffset(start, end);\n  var minutesFromMidnight = _dates2.default.diff(_dates2.default.startOf(start, 'day'), start, 'minutes');\n\n  var numGroups = Math.ceil(totalMin / (step * timeslots));\n  var numSlots = numGroups * timeslots;\n\n  var groups = new Array(numGroups);\n  var slots = new Array(numSlots);\n  // Each slot date is created from \"zero\", instead of adding `step` to\n  // the previous one, in order to avoid DST oddities\n  for (var grp = 0; grp < numGroups; grp++) {\n    groups[grp] = new Array(timeslots);\n\n    for (var slot = 0; slot < timeslots; slot++) {\n      var slotIdx = grp * timeslots + slot;\n      var minFromStart = slotIdx * step;\n      // A date with total minutes calculated from the start of the day\n      slots[slotIdx] = groups[grp][slot] = new Date(start.getFullYear(), start.getMonth(), start.getDate(), 0, minutesFromMidnight + minFromStart, 0, 0);\n    }\n  }\n\n  // Necessary to be able to select up until the last timeslot in a day\n  var lastSlotMinFromStart = slots.length * step;\n  slots.push(new Date(start.getFullYear(), start.getMonth(), start.getDate(), 0, minutesFromMidnight + lastSlotMinFromStart, 0, 0));\n\n  function positionFromDate(date) {\n    var diff = _dates2.default.diff(start, date, 'minutes') + getDstOffset(start, date);\n    return Math.min(diff, totalMin);\n  }\n\n  return {\n    groups: groups,\n    update: function update(args) {\n      if (getKey(args) !== key) return getSlotMetrics(args);\n      return this;\n    },\n    dateIsInGroup: function dateIsInGroup(date, groupIndex) {\n      var nextGroup = groups[groupIndex + 1];\n      return _dates2.default.inRange(date, groups[groupIndex][0], nextGroup ? nextGroup[0] : end, 'minutes');\n    },\n    nextSlot: function nextSlot(slot) {\n      var next = slots[Math.min(slots.indexOf(slot) + 1, slots.length - 1)];\n      // in the case of the last slot we won't a long enough range so manually get it\n      if (next === slot) next = _dates2.default.add(slot, step, 'minutes');\n      return next;\n    },\n    closestSlotToPosition: function closestSlotToPosition(percent) {\n      var slot = Math.min(slots.length - 1, Math.max(0, Math.floor(percent * numSlots)));\n      return slots[slot];\n    },\n    startsBefore: function startsBefore(date) {\n      return _dates2.default.lt(_dates2.default.merge(start, date), start, 'minutes');\n    },\n    startsAfter: function startsAfter(date) {\n      return _dates2.default.gt(_dates2.default.merge(end, date), end, 'minutes');\n    },\n    getRange: function getRange(rangeStart, rangeEnd) {\n      rangeStart = _dates2.default.min(end, _dates2.default.max(start, rangeStart));\n      rangeEnd = _dates2.default.min(end, _dates2.default.max(start, rangeEnd));\n\n      var rangeStartMin = positionFromDate(rangeStart);\n      var rangeEndMin = positionFromDate(rangeEnd);\n      var top = rangeStartMin / totalMin * 100;\n\n      return {\n        top: top,\n        height: rangeEndMin / totalMin * 100 - top,\n        start: positionFromDate(rangeStart),\n        startDate: rangeStart,\n        end: positionFromDate(rangeEnd),\n        endDate: rangeEnd\n      };\n    }\n  };\n}"]},"metadata":{},"sourceType":"script"}